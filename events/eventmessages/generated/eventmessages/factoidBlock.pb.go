// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: eventmessages/factoidBlock.proto

package eventmessages

import (
	fmt "fmt"
	_ "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto"
	types "github.com/bi-foundation/protobuf-graphql-extension/graphqlproto/types"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FactoidBlock struct {
	BodyMerkleRoot              *Hash          `protobuf:"bytes,1,opt,name=bodyMerkleRoot,proto3" json:"bodyMerkleRoot,omitempty"`
	PreviousKeyMerkleRoot       *Hash          `protobuf:"bytes,2,opt,name=previousKeyMerkleRoot,proto3" json:"previousKeyMerkleRoot,omitempty"`
	PreviousLedgerKeyMerkleRoot *Hash          `protobuf:"bytes,3,opt,name=previousLedgerKeyMerkleRoot,proto3" json:"previousLedgerKeyMerkleRoot,omitempty"`
	ExchangeRate                uint64         `protobuf:"varint,4,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
	BlockHeight                 uint32         `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Transactions                []*Transaction `protobuf:"bytes,6,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral        struct{}       `json:"-"`
	XXX_unrecognized            []byte         `json:"-"`
	XXX_sizecache               int32          `json:"-"`
}

func (m *FactoidBlock) Reset()         { *m = FactoidBlock{} }
func (m *FactoidBlock) String() string { return proto.CompactTextString(m) }
func (*FactoidBlock) ProtoMessage()    {}
func (*FactoidBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{0}
}
func (m *FactoidBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FactoidBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FactoidBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FactoidBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactoidBlock.Merge(m, src)
}
func (m *FactoidBlock) XXX_Size() int {
	return m.Size()
}
func (m *FactoidBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FactoidBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FactoidBlock proto.InternalMessageInfo

func (m *FactoidBlock) GetBodyMerkleRoot() *Hash {
	if m != nil {
		return m.BodyMerkleRoot
	}
	return nil
}

func (m *FactoidBlock) GetPreviousKeyMerkleRoot() *Hash {
	if m != nil {
		return m.PreviousKeyMerkleRoot
	}
	return nil
}

func (m *FactoidBlock) GetPreviousLedgerKeyMerkleRoot() *Hash {
	if m != nil {
		return m.PreviousLedgerKeyMerkleRoot
	}
	return nil
}

func (m *FactoidBlock) GetExchangeRate() uint64 {
	if m != nil {
		return m.ExchangeRate
	}
	return 0
}

func (m *FactoidBlock) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *FactoidBlock) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type Transaction struct {
	TransactionId                 *Hash                    `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	BlockHeight                   uint32                   `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Timestamp                     *types.Timestamp         `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Inputs                        []*TransactionAddress    `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs                       []*TransactionAddress    `protobuf:"bytes,5,rep,name=outputs,proto3" json:"outputs,omitempty"`
	OutputEntryCredits            []*TransactionAddress    `protobuf:"bytes,6,rep,name=outputEntryCredits,proto3" json:"outputEntryCredits,omitempty"`
	RedeemConditionDatastructures []*RCD                   `protobuf:"bytes,7,rep,name=redeemConditionDatastructures,proto3" json:"redeemConditionDatastructures,omitempty"`
	SignatureBlocks               []*FactoidSignatureBlock `protobuf:"bytes,8,rep,name=signatureBlocks,proto3" json:"signatureBlocks,omitempty"`
	XXX_NoUnkeyedLiteral          struct{}                 `json:"-"`
	XXX_unrecognized              []byte                   `json:"-"`
	XXX_sizecache                 int32                    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransactionId() *Hash {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func (m *Transaction) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Transaction) GetTimestamp() *types.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Transaction) GetInputs() []*TransactionAddress {
	if m != nil {
		return m.Inputs
	}
	return nil
}

func (m *Transaction) GetOutputs() []*TransactionAddress {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Transaction) GetOutputEntryCredits() []*TransactionAddress {
	if m != nil {
		return m.OutputEntryCredits
	}
	return nil
}

func (m *Transaction) GetRedeemConditionDatastructures() []*RCD {
	if m != nil {
		return m.RedeemConditionDatastructures
	}
	return nil
}

func (m *Transaction) GetSignatureBlocks() []*FactoidSignatureBlock {
	if m != nil {
		return m.SignatureBlocks
	}
	return nil
}

type TransactionAddress struct {
	Amount               uint64   `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Address              *Hash    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionAddress) Reset()         { *m = TransactionAddress{} }
func (m *TransactionAddress) String() string { return proto.CompactTextString(m) }
func (*TransactionAddress) ProtoMessage()    {}
func (*TransactionAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{2}
}
func (m *TransactionAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransactionAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionAddress.Merge(m, src)
}
func (m *TransactionAddress) XXX_Size() int {
	return m.Size()
}
func (m *TransactionAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionAddress.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionAddress proto.InternalMessageInfo

func (m *TransactionAddress) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionAddress) GetAddress() *Hash {
	if m != nil {
		return m.Address
	}
	return nil
}

type RCD struct {
	// Types that are valid to be assigned to Value:
	//	*RCD_Rcd1
	Value                isRCD_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *RCD) Reset()         { *m = RCD{} }
func (m *RCD) String() string { return proto.CompactTextString(m) }
func (*RCD) ProtoMessage()    {}
func (*RCD) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{3}
}
func (m *RCD) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCD) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCD.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCD) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCD.Merge(m, src)
}
func (m *RCD) XXX_Size() int {
	return m.Size()
}
func (m *RCD) XXX_DiscardUnknown() {
	xxx_messageInfo_RCD.DiscardUnknown(m)
}

var xxx_messageInfo_RCD proto.InternalMessageInfo

type isRCD_Value interface {
	isRCD_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RCD_Rcd1 struct {
	Rcd1 *RCD1 `protobuf:"bytes,1,opt,name=rcd1,proto3,oneof"`
}

func (*RCD_Rcd1) isRCD_Value() {}

func (m *RCD) GetValue() isRCD_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RCD) GetRcd1() *RCD1 {
	if x, ok := m.GetValue().(*RCD_Rcd1); ok {
		return x.Rcd1
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RCD) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RCD_OneofMarshaler, _RCD_OneofUnmarshaler, _RCD_OneofSizer, []interface{}{
		(*RCD_Rcd1)(nil),
	}
}

func _RCD_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RCD)
	// value
	switch x := m.Value.(type) {
	case *RCD_Rcd1:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rcd1); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RCD.Value has unexpected type %T", x)
	}
	return nil
}

func _RCD_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RCD)
	switch tag {
	case 1: // value.rcd1
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RCD1)
		err := b.DecodeMessage(msg)
		m.Value = &RCD_Rcd1{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RCD_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RCD)
	// value
	switch x := m.Value.(type) {
	case *RCD_Rcd1:
		s := proto.Size(x.Rcd1)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type RCD1 struct {
	PublicKey            []byte   `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RCD1) Reset()         { *m = RCD1{} }
func (m *RCD1) String() string { return proto.CompactTextString(m) }
func (*RCD1) ProtoMessage()    {}
func (*RCD1) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{4}
}
func (m *RCD1) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RCD1) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RCD1.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RCD1) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RCD1.Merge(m, src)
}
func (m *RCD1) XXX_Size() int {
	return m.Size()
}
func (m *RCD1) XXX_DiscardUnknown() {
	xxx_messageInfo_RCD1.DiscardUnknown(m)
}

var xxx_messageInfo_RCD1 proto.InternalMessageInfo

func (m *RCD1) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type FactoidSignatureBlock struct {
	Signature            []*FactoidSignature `protobuf:"bytes,1,rep,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *FactoidSignatureBlock) Reset()         { *m = FactoidSignatureBlock{} }
func (m *FactoidSignatureBlock) String() string { return proto.CompactTextString(m) }
func (*FactoidSignatureBlock) ProtoMessage()    {}
func (*FactoidSignatureBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{5}
}
func (m *FactoidSignatureBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FactoidSignatureBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FactoidSignatureBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FactoidSignatureBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactoidSignatureBlock.Merge(m, src)
}
func (m *FactoidSignatureBlock) XXX_Size() int {
	return m.Size()
}
func (m *FactoidSignatureBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FactoidSignatureBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FactoidSignatureBlock proto.InternalMessageInfo

func (m *FactoidSignatureBlock) GetSignature() []*FactoidSignature {
	if m != nil {
		return m.Signature
	}
	return nil
}

type FactoidSignature struct {
	SignatureValue       []byte   `protobuf:"bytes,1,opt,name=signatureValue,proto3" json:"signatureValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactoidSignature) Reset()         { *m = FactoidSignature{} }
func (m *FactoidSignature) String() string { return proto.CompactTextString(m) }
func (*FactoidSignature) ProtoMessage()    {}
func (*FactoidSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_1291991795dfbb48, []int{6}
}
func (m *FactoidSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FactoidSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FactoidSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FactoidSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactoidSignature.Merge(m, src)
}
func (m *FactoidSignature) XXX_Size() int {
	return m.Size()
}
func (m *FactoidSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_FactoidSignature.DiscardUnknown(m)
}

var xxx_messageInfo_FactoidSignature proto.InternalMessageInfo

func (m *FactoidSignature) GetSignatureValue() []byte {
	if m != nil {
		return m.SignatureValue
	}
	return nil
}

func init() {
	proto.RegisterType((*FactoidBlock)(nil), "eventmessages.FactoidBlock")
	proto.RegisterType((*Transaction)(nil), "eventmessages.Transaction")
	proto.RegisterType((*TransactionAddress)(nil), "eventmessages.TransactionAddress")
	proto.RegisterType((*RCD)(nil), "eventmessages.RCD")
	proto.RegisterType((*RCD1)(nil), "eventmessages.RCD1")
	proto.RegisterType((*FactoidSignatureBlock)(nil), "eventmessages.FactoidSignatureBlock")
	proto.RegisterType((*FactoidSignature)(nil), "eventmessages.FactoidSignature")
}

func init() { proto.RegisterFile("eventmessages/factoidBlock.proto", fileDescriptor_1291991795dfbb48) }

var fileDescriptor_1291991795dfbb48 = []byte{
	// 646 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x41, 0x4f, 0xdb, 0x4a,
	0x10, 0xc7, 0x31, 0x84, 0xe4, 0x31, 0x09, 0xbc, 0xa7, 0x7d, 0xe2, 0xc9, 0xe2, 0x95, 0xe0, 0x5a,
	0xa8, 0x4a, 0x0f, 0x71, 0x04, 0x3d, 0x51, 0xd4, 0x4a, 0x25, 0xa1, 0x02, 0xd1, 0x22, 0x75, 0x4b,
	0x51, 0xd5, 0x9e, 0xd6, 0xf6, 0xe0, 0x58, 0xc4, 0x5e, 0x77, 0x77, 0x8d, 0xc8, 0x37, 0xe9, 0xa1,
	0xa7, 0x7e, 0x92, 0x1e, 0x7b, 0xec, 0x47, 0xa8, 0xe8, 0x47, 0xe8, 0x17, 0xa8, 0xec, 0xd8, 0x24,
	0x36, 0x24, 0x45, 0xea, 0x29, 0xd9, 0x99, 0xdf, 0xff, 0xaf, 0x99, 0xf1, 0xce, 0x82, 0x81, 0x17,
	0x18, 0xaa, 0x00, 0xa5, 0x64, 0x1e, 0xca, 0xce, 0x19, 0x73, 0x14, 0xf7, 0xdd, 0xbd, 0x01, 0x77,
	0xce, 0xad, 0x48, 0x70, 0xc5, 0xc9, 0x72, 0x81, 0x58, 0x2b, 0x09, 0x3c, 0x0c, 0x51, 0xb0, 0xc1,
	0xc9, 0x30, 0x42, 0x39, 0x12, 0xac, 0x1d, 0x7b, 0xbe, 0xea, 0xc7, 0xb6, 0xe5, 0xf0, 0xa0, 0x63,
	0xfb, 0xed, 0x33, 0x1e, 0x87, 0x2e, 0x53, 0x3e, 0x0f, 0x3b, 0x69, 0xde, 0x8e, 0xcf, 0xda, 0x9e,
	0x60, 0x51, 0xff, 0xc3, 0xa0, 0x8d, 0x97, 0x0a, 0x43, 0x99, 0xa4, 0xb2, 0x48, 0x4a, 0xe4, 0x87,
	0xcc, 0xef, 0xf4, 0x8f, 0xfd, 0x54, 0x52, 0x5d, 0x47, 0xf9, 0x01, 0x4a, 0xc5, 0x82, 0x68, 0xe4,
	0x6b, 0xfe, 0x9c, 0x87, 0xc6, 0xf3, 0x89, 0x7e, 0xc9, 0x2e, 0xac, 0xd8, 0xdc, 0x1d, 0xbe, 0x44,
	0x71, 0x3e, 0x40, 0xca, 0xb9, 0xd2, 0x35, 0x43, 0x6b, 0xd5, 0xb7, 0xff, 0xb5, 0x0a, 0x3d, 0x5b,
	0x07, 0x4c, 0xf6, 0x69, 0x09, 0x25, 0x87, 0xb0, 0x1a, 0x09, 0xbc, 0xf0, 0x79, 0x2c, 0x8f, 0x70,
	0xd2, 0x63, 0x7e, 0xba, 0xc7, 0xed, 0x0a, 0xf2, 0x06, 0xfe, 0xcf, 0x13, 0x2f, 0xd0, 0xf5, 0x50,
	0x14, 0x0d, 0x17, 0xa6, 0x1b, 0xce, 0xd2, 0x11, 0x13, 0x1a, 0x78, 0xe9, 0xf4, 0x59, 0xe8, 0x21,
	0x65, 0x0a, 0xf5, 0x8a, 0xa1, 0xb5, 0x2a, 0xb4, 0x10, 0x23, 0x06, 0xd4, 0xed, 0x64, 0x16, 0x07,
	0xe8, 0x7b, 0x7d, 0xa5, 0x2f, 0x1a, 0x5a, 0x6b, 0x99, 0x4e, 0x86, 0xc8, 0x53, 0x68, 0x28, 0xc1,
	0x42, 0xc9, 0x9c, 0xe4, 0x13, 0x48, 0xbd, 0x6a, 0x2c, 0xb4, 0xea, 0xdb, 0x6b, 0xa5, 0x6a, 0x4e,
	0xc6, 0x08, 0x2d, 0xf0, 0xe6, 0xa7, 0x0a, 0xd4, 0x27, 0xb2, 0x64, 0x07, 0x96, 0x27, 0xf2, 0x87,
	0xee, 0xac, 0x99, 0x17, 0xc9, 0x72, 0xb1, 0xf3, 0x37, 0x8b, 0xdd, 0x85, 0xa5, 0xeb, 0xaf, 0x9e,
	0xcd, 0x6d, 0xdd, 0x9a, 0xbc, 0x1a, 0x56, 0x7a, 0x35, 0xac, 0x93, 0x1c, 0xa2, 0x63, 0x9e, 0xec,
	0x40, 0xd5, 0x0f, 0xa3, 0x58, 0x49, 0xbd, 0x92, 0xf6, 0x78, 0x7f, 0x7a, 0x8f, 0xcf, 0x5c, 0x57,
	0xa0, 0x94, 0x34, 0x13, 0x90, 0x5d, 0xa8, 0xf1, 0x58, 0xa5, 0xda, 0xc5, 0xbb, 0x6a, 0x73, 0x05,
	0x79, 0x05, 0x64, 0xf4, 0x77, 0x3f, 0x54, 0x62, 0xd8, 0x15, 0xe8, 0xfa, 0x2a, 0x9f, 0xf3, 0x1d,
	0x7c, 0x6e, 0x11, 0x93, 0xb7, 0xb0, 0x2e, 0xd0, 0x45, 0x0c, 0xba, 0x3c, 0x74, 0xfd, 0x84, 0xee,
	0x31, 0xc5, 0xa4, 0x12, 0xb1, 0xa3, 0x62, 0x81, 0x52, 0xaf, 0xa5, 0xee, 0xa4, 0xe4, 0x4e, 0xbb,
	0x3d, 0x3a, 0x5b, 0x48, 0x8e, 0xe1, 0x6f, 0xe9, 0x7b, 0x21, 0x4b, 0x4e, 0xe9, 0x16, 0x49, 0xfd,
	0xaf, 0xd4, 0x6b, 0xb3, 0xe4, 0x95, 0x6d, 0xda, 0xeb, 0x02, 0x4c, 0xcb, 0x62, 0xf3, 0x3d, 0x90,
	0x9b, 0x3d, 0x91, 0xff, 0xa0, 0xca, 0x02, 0x1e, 0x87, 0xa3, 0x8d, 0xac, 0xd0, 0xec, 0x44, 0xda,
	0x50, 0x63, 0x23, 0x64, 0xd6, 0x9a, 0xe5, 0x8c, 0xb9, 0x03, 0x0b, 0xb4, 0xdb, 0x23, 0x0f, 0xa1,
	0x22, 0x1c, 0x77, 0x6b, 0xca, 0x4d, 0xa3, 0xdd, 0xde, 0xd6, 0xc1, 0x1c, 0x4d, 0x91, 0xbd, 0x1a,
	0x2c, 0x5e, 0xb0, 0x41, 0x8c, 0xe6, 0x26, 0x54, 0x92, 0x04, 0xb9, 0x07, 0x4b, 0x51, 0x6c, 0x0f,
	0x7c, 0xe7, 0x08, 0x87, 0xa9, 0x41, 0x83, 0x8e, 0x03, 0xe6, 0x29, 0xac, 0xde, 0xda, 0x27, 0x79,
	0x02, 0x4b, 0xd7, 0x9d, 0xea, 0x5a, 0x3a, 0xa0, 0x8d, 0xdf, 0x0c, 0x88, 0x8e, 0x15, 0xe6, 0x63,
	0xf8, 0xa7, 0x9c, 0x26, 0x0f, 0x60, 0xe5, 0x1a, 0x38, 0x4d, 0x6a, 0xcc, 0xca, 0x29, 0x45, 0xf7,
	0xf6, 0xbf, 0x5e, 0x35, 0xb5, 0x6f, 0x57, 0x4d, 0xed, 0xfb, 0x55, 0x53, 0xfb, 0xf8, 0xa3, 0x39,
	0xf7, 0xe5, 0xf3, 0x86, 0x06, 0x86, 0xc3, 0x03, 0x2b, 0x7d, 0xed, 0xf3, 0x1f, 0xb7, 0x58, 0xcf,
	0xbb, 0xe2, 0xbb, 0x6f, 0x57, 0xd3, 0x7d, 0x79, 0xf4, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x5d, 0x7e,
	0x53, 0xfe, 0x31, 0x06, 0x00, 0x00,
}

func (m *FactoidBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FactoidBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.BodyMerkleRoot.Size()))
		n1, err1 := m.BodyMerkleRoot.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.PreviousKeyMerkleRoot != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.PreviousKeyMerkleRoot.Size()))
		n2, err2 := m.PreviousKeyMerkleRoot.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.PreviousLedgerKeyMerkleRoot != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.PreviousLedgerKeyMerkleRoot.Size()))
		n3, err3 := m.PreviousLedgerKeyMerkleRoot.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.ExchangeRate != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.ExchangeRate))
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.BlockHeight))
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TransactionId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.TransactionId.Size()))
		n4, err4 := m.TransactionId.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.BlockHeight != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.BlockHeight))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.Timestamp.Size()))
		n5, err5 := m.Timestamp.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	if len(m.Inputs) > 0 {
		for _, msg := range m.Inputs {
			dAtA[i] = 0x22
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Outputs) > 0 {
		for _, msg := range m.Outputs {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.OutputEntryCredits) > 0 {
		for _, msg := range m.OutputEntryCredits {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.RedeemConditionDatastructures) > 0 {
		for _, msg := range m.RedeemConditionDatastructures {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SignatureBlocks) > 0 {
		for _, msg := range m.SignatureBlocks {
			dAtA[i] = 0x42
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransactionAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionAddress) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.Amount))
	}
	if m.Address != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.Address.Size()))
		n6, err6 := m.Address.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RCD) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCD) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		nn7, err7 := m.Value.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += nn7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RCD_Rcd1) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Rcd1 != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(m.Rcd1.Size()))
		n8, err8 := m.Rcd1.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}
func (m *RCD1) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RCD1) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(len(m.PublicKey)))
		i += copy(dAtA[i:], m.PublicKey)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FactoidSignatureBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FactoidSignatureBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		for _, msg := range m.Signature {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFactoidBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FactoidSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FactoidSignature) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SignatureValue) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFactoidBlock(dAtA, i, uint64(len(m.SignatureValue)))
		i += copy(dAtA[i:], m.SignatureValue)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintFactoidBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FactoidBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BodyMerkleRoot != nil {
		l = m.BodyMerkleRoot.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.PreviousKeyMerkleRoot != nil {
		l = m.PreviousKeyMerkleRoot.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.PreviousLedgerKeyMerkleRoot != nil {
		l = m.PreviousLedgerKeyMerkleRoot.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.ExchangeRate != 0 {
		n += 1 + sovFactoidBlock(uint64(m.ExchangeRate))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFactoidBlock(uint64(m.BlockHeight))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != nil {
		l = m.TransactionId.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovFactoidBlock(uint64(m.BlockHeight))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if len(m.Inputs) > 0 {
		for _, e := range m.Inputs {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if len(m.Outputs) > 0 {
		for _, e := range m.Outputs {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if len(m.OutputEntryCredits) > 0 {
		for _, e := range m.OutputEntryCredits {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if len(m.RedeemConditionDatastructures) > 0 {
		for _, e := range m.RedeemConditionDatastructures {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if len(m.SignatureBlocks) > 0 {
		for _, e := range m.SignatureBlocks {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != 0 {
		n += 1 + sovFactoidBlock(uint64(m.Amount))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RCD) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RCD_Rcd1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rcd1 != nil {
		l = m.Rcd1.Size()
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	return n
}
func (m *RCD1) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FactoidSignatureBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signature) > 0 {
		for _, e := range m.Signature {
			l = e.Size()
			n += 1 + l + sovFactoidBlock(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FactoidSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignatureValue)
	if l > 0 {
		n += 1 + l + sovFactoidBlock(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFactoidBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFactoidBlock(x uint64) (n int) {
	return sovFactoidBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FactoidBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FactoidBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FactoidBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BodyMerkleRoot == nil {
				m.BodyMerkleRoot = &Hash{}
			}
			if err := m.BodyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousKeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousKeyMerkleRoot == nil {
				m.PreviousKeyMerkleRoot = &Hash{}
			}
			if err := m.PreviousKeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousLedgerKeyMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PreviousLedgerKeyMerkleRoot == nil {
				m.PreviousLedgerKeyMerkleRoot = &Hash{}
			}
			if err := m.PreviousLedgerKeyMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRate", wireType)
			}
			m.ExchangeRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExchangeRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionId == nil {
				m.TransactionId = &Hash{}
			}
			if err := m.TransactionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &types.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Inputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Inputs = append(m.Inputs, &TransactionAddress{})
			if err := m.Inputs[len(m.Inputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Outputs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Outputs = append(m.Outputs, &TransactionAddress{})
			if err := m.Outputs[len(m.Outputs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputEntryCredits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutputEntryCredits = append(m.OutputEntryCredits, &TransactionAddress{})
			if err := m.OutputEntryCredits[len(m.OutputEntryCredits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedeemConditionDatastructures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RedeemConditionDatastructures = append(m.RedeemConditionDatastructures, &RCD{})
			if err := m.RedeemConditionDatastructures[len(m.RedeemConditionDatastructures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureBlocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureBlocks = append(m.SignatureBlocks, &FactoidSignatureBlock{})
			if err := m.SignatureBlocks[len(m.SignatureBlocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Hash{}
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCD) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCD: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCD: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rcd1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RCD1{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &RCD_Rcd1{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RCD1) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RCD1: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RCD1: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FactoidSignatureBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FactoidSignatureBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FactoidSignatureBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature, &FactoidSignature{})
			if err := m.Signature[len(m.Signature)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FactoidSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FactoidSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FactoidSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureValue = append(m.SignatureValue[:0], dAtA[iNdEx:postIndex]...)
			if m.SignatureValue == nil {
				m.SignatureValue = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFactoidBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFactoidBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFactoidBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFactoidBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFactoidBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFactoidBlock
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFactoidBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFactoidBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFactoidBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFactoidBlock
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFactoidBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFactoidBlock   = fmt.Errorf("proto: integer overflow")
)
